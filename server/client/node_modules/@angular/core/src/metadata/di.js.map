{"version":3,"file":"di.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/metadata/di.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAGI,EAAC,WAAW,EAAC,MAAM,oBAAoB;OAGvC,EAAC,kBAAkB,EAAE,iBAAiB,EAAC,MAAM,oBAAoB;AAExE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,OAAO,IAAM,4BAA4B,GAAG,IAAI,WAAW,CAAC,2BAA2B,CAAC,CAAC;AAsEzF;;;;;GAKG;AACH,OAAO,IAAM,SAAS,GAClB,kBAAkB,CAAC,WAAW,EAAE,CAAC,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;AAepE;;;;GAIG;AACH;IAAA;IAA6B,CAAC;IAAD,YAAC;AAAD,CAAC,AAA9B,IAA8B;AA2C9B;;;;;GAKG;AACH,OAAO,IAAM,eAAe,GAA6B,iBAAiB,CACtE,iBAAiB,EACjB;IACE,CAAC,UAAU,EAAE,SAAS,CAAC;IACvB,EAAC,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAC;CACxE,EACD,KAAK,CAAC,CAAC;AAgDX;;;;;GAKG;AACH,OAAO,IAAM,YAAY,GAA0B,iBAAiB,CAChE,cAAc,EACd;IACE,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE;QACvB,KAAK,EAAE,IAAI;QACX,WAAW,EAAE,KAAK;QAClB,WAAW,EAAE,KAAK;QAClB,IAAI,EAAE,SAAS;KAChB;CACF,EACD,KAAK,CAAC,CAAC;AAgGX;;;;;GAKG;AACH,OAAO,IAAM,YAAY,GAA0B,iBAAiB,CAChE,cAAc,EACd;IACE,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE;QACvB,KAAK,EAAE,KAAK;QACZ,WAAW,EAAE,IAAI;QACjB,WAAW,EAAE,IAAI;QACjB,IAAI,EAAE,SAAS;KAChB;CACF,EACD,KAAK,CAAC,CAAC;AA0FX;;;;;GAKG;AACH,OAAO,IAAM,SAAS,GAAuB,iBAAiB,CAC1D,WAAW,EACX;IACE,CAAC,UAAU,EAAE,SAAS,CAAC,EAAE;QACvB,KAAK,EAAE,IAAI;QACX,WAAW,EAAE,IAAI;QACjB,WAAW,EAAE,IAAI;QACjB,IAAI,EAAE,SAAS;KAChB;CACF,EACD,KAAK,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {resolveForwardRef} from '../di/forward_ref';\nimport {OpaqueToken} from '../di/opaque_token';\nimport {StringWrapper, isString, stringify} from '../facade/lang';\nimport {Type} from '../type';\nimport {makeParamDecorator, makePropDecorator} from '../util/decorators';\n\n/**\n * This token can be used to create a virtual provider that will populate the\n * `entryComponents` fields of components and ng modules based on its `useValue`.\n * All components that are referenced in the `useValue` value (either directly\n * or in a nested array or map) will be added to the `entryComponents` property.\n *\n * ### Example\n * The following example shows how the router can populate the `entryComponents`\n * field of an NgModule based on the router configuration which refers\n * to components.\n *\n * ```typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * @NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * ```\n *\n * @experimental\n */\nexport const ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');\n\n\n/**\n * Type of the Attribute decorator / constructor function.\n *\n * @stable\n */\nexport interface AttributeDecorator {\n  /**\n * Specifies that a constant attribute value should be injected.\n *\n * The directive can inject constant string literals of host element attributes.\n *\n * ### Example\n *\n * Suppose we have an `<input>` element and want to know its `type`.\n *\n * ```html\n * <input type=\"text\">\n * ```\n *\n * A decorator can inject string literal `text` like so:\n *\n * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n *\n * ### Example as TypeScript Decorator\n *\n * {@example core/ts/metadata/metadata.ts region='attributeFactory'}\n *\n * ### Example as ES5 DSL\n *\n * ```\n * var MyComponent = ng\n *   .Component({...})\n *   .Class({\n *     constructor: [new ng.Attribute('title'), function(title) {\n *       ...\n *     }]\n *   })\n * ```\n *\n * ### Example as ES5 annotation\n *\n * ```\n * var MyComponent = function(title) {\n *   ...\n * };\n *\n * MyComponent.annotations = [\n *   new ng.Component({...})\n * ]\n * MyComponent.parameters = [\n *   [new ng.Attribute('title')]\n * ]\n * ```\n *\n * @stable\n */ (name: string): any;\n  new (name: string): Attribute;\n}\n\n\n/**\n * Type of the Attribute metadata.\n *\n * @stable\n */\nexport interface Attribute { attributeName?: string; }\n\n/**\n * Attribute decorator and metadata.\n *\n * @stable\n * @Annotation\n */\nexport const Attribute: AttributeDecorator =\n    makeParamDecorator('Attribute', [['attributeName', undefined]]);\n\n/**\n * Type of the Query metadata.\n *\n * @stable\n */\nexport interface Query {\n  descendants: boolean;\n  first: boolean;\n  read: any;\n  isViewQuery: boolean;\n  selector: any;\n}\n\n/**\n * Base class for query metadata\n *\n * @stable\n */\nexport abstract class Query {}\n\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * @stable\n */\nexport interface ContentChildrenDecorator {\n  /**\n   * Configures a content query.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * ### Example\n   *\n   * ```\n   * @Directive({\n   *   selector: 'someDir'\n   * })\n   * class SomeDir {\n   *   @ContentChildren(ChildDirective) contentChildren: QueryList<ChildDirective>;\n   *\n   *   ngAfterContentInit() {\n   *     // contentChildren is set\n   *   }\n   * }\n   * ```\n   * @stable\n   */\n  (selector: Type<any>|Function|string,\n   {descendants, read}?: {descendants?: boolean, read?: any}): any;\n  new (\n      selector: Type<any>|Function|string,\n      {descendants, read}?: {descendants?: boolean, read?: any}): Query;\n}\n\n/**\n * Type of the ContentChildren metadata.\n *\n * @stable\n */\nexport type ContentChildren = Query;\n\n/**\n * ContentChildren decorator and metadata.\n *\n * @stable\n * @Annotation\n */\nexport const ContentChildren: ContentChildrenDecorator = makePropDecorator(\n    'ContentChildren',\n    [\n      ['selector', undefined],\n      {first: false, isViewQuery: false, descendants: false, read: undefined}\n    ],\n    Query);\n\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n * @stable\n */\nexport interface ContentChildDecorator {\n  /**\n   * Configures a content query.\n   *\n   * Content queries are set before the `ngAfterContentInit` callback is called.\n   *\n   * ### Example\n   *\n   * ```\n   * @Directive({\n   *   selector: 'someDir'\n   * })\n   * class SomeDir {\n   *   @ContentChild(ChildDirective) contentChild;\n   *   @ContentChild('container_ref') containerChild\n   *\n   *   ngAfterContentInit() {\n   *     // contentChild is set\n   *     // containerChild is set\n   *   }\n   * }\n   * ```\n   *\n   * ```html\n   * <container #container_ref>\n   *   <item>a</item>\n   *   <item>b</item>\n   * </container>\n   * ```\n   */\n  (selector: Type<any>|Function|string, {read}?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, {read}?: {read?: any}): ContentChild;\n}\n\n/**\n * Type of the ContentChild metadata.\n *\n * @stable\n */\nexport type ContentChild = Query;\n\n/**\n * ContentChild decorator and metadata.\n *\n * @stable\n * @Annotation\n */\nexport const ContentChild: ContentChildDecorator = makePropDecorator(\n    'ContentChild',\n    [\n      ['selector', undefined], {\n        first: true,\n        isViewQuery: false,\n        descendants: false,\n        read: undefined,\n      }\n    ],\n    Query);\n\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * @stable\n */\nexport interface ViewChildrenDecorator {\n  /**\n * Declares a list of child element references.\n *\n * Angular automatically updates the list when the DOM is updated.\n *\n * `ViewChildren` takes an argument to select elements.\n *\n * - If the argument is a type, directives or components with the type will be bound.\n *\n * - If the argument is a string, the string is interpreted as a list of comma-separated selectors.\n * For each selector, an element containing the matching template variable (e.g. `#child`) will be\n * bound.\n *\n * View children are set before the `ngAfterViewInit` callback is called.\n *\n * ### Example\n *\n * With type selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: `\n *     <child-cmp></child-cmp>\n *     <child-cmp></child-cmp>\n *     <child-cmp></child-cmp>\n *   `,\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChildren(ChildCmp) children:QueryList<ChildCmp>;\n *\n *   ngAfterViewInit() {\n *     // children are set\n *     this.children.toArray().forEach((child)=>child.doSomething());\n *   }\n * }\n * ```\n *\n * With string selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: `\n *     <child-cmp #child1></child-cmp>\n *     <child-cmp #child2></child-cmp>\n *     <child-cmp #child3></child-cmp>\n *   `,\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChildren('child1,child2,child3') children:QueryList<ChildCmp>;\n *\n *   ngAfterViewInit() {\n *     // children are set\n *     this.children.toArray().forEach((child)=>child.doSomething());\n *   }\n * }\n * ```\n * @stable\n */ (selector: Type<any>|Function|string, {read}?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, {read}?: {read?: any}): ViewChildren;\n}\n\n/**\n * Type of the ViewChildren metadata.\n *\n * @stable\n */\nexport type ViewChildren = Query;\n\n/**\n * ViewChildren decorator and metadata.\n *\n * @stable\n * @Annotation\n */\nexport const ViewChildren: ViewChildrenDecorator = makePropDecorator(\n    'ViewChildren',\n    [\n      ['selector', undefined], {\n        first: false,\n        isViewQuery: true,\n        descendants: true,\n        read: undefined,\n      }\n    ],\n    Query);\n\n\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * @stable\n */\nexport interface ViewChildDecorator {\n  /**\n *\n * Declares a reference of child element.\n *\n * `ViewChildren` takes an argument to select elements.\n *\n * - If the argument is a type, a directive or a component with the type will be bound.\n *\n * If the argument is a string, the string is interpreted as a selector. An element containing the\n * matching template variable (e.g. `#child`) will be bound.\n *\n * In either case, `@ViewChild()` assigns the first (looking from above) element if there are\n multiple matches.\n *\n * View child is set before the `ngAfterViewInit` callback is called.\n *\n * ### Example\n *\n * With type selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: '<child-cmp></child-cmp>',\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChild(ChildCmp) child:ChildCmp;\n *\n *   ngAfterViewInit() {\n *     // child is set\n *     this.child.doSomething();\n *   }\n * }\n * ```\n *\n * With string selector:\n *\n * ```\n * @Component({\n *   selector: 'child-cmp',\n *   template: '<p>child</p>'\n * })\n * class ChildCmp {\n *   doSomething() {}\n * }\n *\n * @Component({\n *   selector: 'some-cmp',\n *   template: '<child-cmp #child></child-cmp>',\n *   directives: [ChildCmp]\n * })\n * class SomeCmp {\n *   @ViewChild('child') child:ChildCmp;\n *\n *   ngAfterViewInit() {\n *     // child is set\n *     this.child.doSomething();\n *   }\n * }\n * ```\n * @stable\n */ (selector: Type<any>|Function|string, {read}?: {read?: any}): any;\n  new (selector: Type<any>|Function|string, {read}?: {read?: any}): ViewChild;\n}\n\n/**\n * Type of the ViewChild metadata.\n *\n * @stable\n */\nexport type ViewChild = Query;\n\n/**\n * ViewChild decorator and metadata.\n *\n * @stable\n * @Annotation\n */\nexport const ViewChild: ViewChildDecorator = makePropDecorator(\n    'ViewChild',\n    [\n      ['selector', undefined], {\n        first: true,\n        isViewQuery: true,\n        descendants: true,\n        read: undefined,\n      }\n    ],\n    Query);\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}