{"version":3,"file":"menu-directive.js","sourceRoot":"","sources":["../../usr/local/google/home/jelbourn/material2/tmp/broccoli_type_script_compiler-input_base_path-oPmWLW1O.tmp/0/src/demo-app/components/menu/menu-directive.ts"],"names":[],"mappings":"AAAA,kDAAkD;AAClD,0CAA0C;;;;;;;;;;;;;;AAE1C,qBASO,eAAe,CAAC,CAAA;AAEvB,4BAA6D,eAAe,CAAC,CAAA;AAW7E;IAWE,gBAAqC,IAAmB,EACnB,IAAmB;QAXxD,sBAAiB,GAAY,KAAK,CAAC;QAKnC,cAAS,GAAkB,OAAO,CAAC;QACnC,cAAS,GAAkB,OAAO,CAAC;QAwBzB,UAAK,GAAG,IAAI,mBAAY,CAAC;QAlBjC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAAC,CAAC;QACvC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAAC,CAAC;IACzC,CAAC;IASD,sBAAI,6BAAS;QAPb;;;;;WAKG;aAEH,UAAc,OAAe;YAC3B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAC,GAAQ,EAAE,SAAiB;gBACtE,GAAG,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;gBACtB,MAAM,CAAC,GAAG,CAAC;YACb,CAAC,EAAE,EAAE,CAAC,CAAC;QACT,CAAC;;;OAAA;IAID;;;;OAIG;IACH,iCAAgB,GAAhB,UAAiB,IAAa;QAC5B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAChC,CAAC;IAEO,8BAAa,GAArB,UAAsB,GAAkB;QACtC,EAAE,CAAC,CAAE,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,OAAO,CAAC,CAAC,CAAC;YACzC,MAAM,IAAI,oCAAsB,EAAE,CAAC;QACrC,CAAC;QACD,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;IACvB,CAAC;IAEO,8BAAa,GAArB,UAAsB,GAAkB;QACtC,EAAE,CAAC,CAAE,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,OAAO,CAAC,CAAC,CAAC;YACxC,MAAM,IAAI,oCAAsB,EAAE,CAAC;QACrC,CAAC;QACD,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;IACvB,CAAC;IAEO,gCAAe,GAAvB;QACE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAjDD;QAAC,gBAAS,CAAC,kBAAW,CAAC;;+CAAA;IAcvB;QAAC,YAAK,CAAC,OAAO,CAAC;;;2CAAA;IAQf;QAAC,aAAM,EAAE;;yCAAA;IAxCX;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,SAAS;YACnB,IAAI,EAAE,EAAC,MAAM,EAAE,MAAM,EAAC;YACtB,WAAW,EAAE,WAAW;YACxB,SAAS,EAAE,CAAC,UAAU,CAAC;YACvB,aAAa,EAAE,wBAAiB,CAAC,IAAI;YACrC,QAAQ,EAAE,QAAQ;SACnB,CAAC;mBAYa,gBAAS,CAAC,YAAY,CAAC;mBACvB,gBAAS,CAAC,YAAY,CAAC;;cAbpC;IA4DF,aAAC;AAAD,CAAC,AA3DD,IA2DC;AA3DY,cAAM,SA2DlB,CAAA","sourcesContent":["// TODO(kara): keyboard events for menu navigation\n// TODO(kara): prevent-close functionality\n\nimport {\n  Attribute,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {MdMenuInvalidPositionX, MdMenuInvalidPositionY} from './menu-errors';\n\n@Component({\n  moduleId: module.id,\n  selector: 'md-menu',\n  host: {'role': 'menu'},\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'mdMenu'\n})\nexport class MdMenu {\n  _showClickCatcher: boolean = false;\n\n  // config object to be passed into the menu's ngClass\n  _classList: Object;\n\n  positionX: MenuPositionX = 'after';\n  positionY: MenuPositionY = 'below';\n\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  constructor(@Attribute('x-position') posX: MenuPositionX,\n              @Attribute('y-position') posY: MenuPositionY) {\n    if (posX) { this._setPositionX(posX); }\n    if (posY) { this._setPositionY(posY); }\n  }\n\n  /**\n   * This method takes classes set on the host md-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set classList(classes: string) {\n    this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n      obj[className] = true;\n      return obj;\n    }, {});\n  }\n\n  @Output() close = new EventEmitter;\n\n  /**\n   * This function toggles the display of the menu's click catcher element.\n   * This element covers the viewport when the menu is open to detect clicks outside the menu.\n   * TODO: internal\n   */\n  _setClickCatcher(bool: boolean): void {\n    this._showClickCatcher = bool;\n  }\n\n  private _setPositionX(pos: MenuPositionX): void {\n    if ( pos !== 'before' && pos !== 'after') {\n      throw new MdMenuInvalidPositionX();\n    }\n    this.positionX = pos;\n  }\n\n  private _setPositionY(pos: MenuPositionY): void {\n    if ( pos !== 'above' && pos !== 'below') {\n      throw new MdMenuInvalidPositionY();\n    }\n    this.positionY = pos;\n  }\n\n  private _emitCloseEvent(): void {\n    this.close.emit(null);\n  }\n}\n"]}