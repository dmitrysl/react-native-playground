{"version":3,"file":"menu-trigger.js","sourceRoot":"","sources":["../../usr/local/google/home/jelbourn/material2/tmp/broccoli_type_script_compiler-input_base_path-oPmWLW1O.tmp/0/src/demo-app/components/menu/menu-trigger.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Directive,\n    ElementRef,\n    Input,\n    Output,\n    EventEmitter,\n    HostListener,\n    ViewContainerRef,\n    AfterViewInit,\n    OnDestroy\n} from '@angular/core';\nimport {MdMenu} from './menu-directive';\nimport {MdMenuMissingError} from './menu-errors';\nimport {\n    Overlay,\n    OverlayState,\n    OverlayRef,\n    OVERLAY_PROVIDERS,\n    TemplatePortal\n} from '@angular2-material/core/core';\nimport {\n    ConnectedPositionStrategy\n} from '@angular2-material/core/overlay/position/connected-position-strategy';\nimport {\n  HorizontalConnectionPos,\n  VerticalConnectionPos\n} from '@angular2-material/core/overlay/position/connected-position';\n\n/**\n * This directive is intended to be used in conjunction with an md-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: '[md-menu-trigger-for]',\n  host: {'aria-haspopup': 'true'},\n  providers: [OVERLAY_PROVIDERS],\n  exportAs: 'mdMenuTrigger'\n})\nexport class MdMenuTrigger implements AfterViewInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef;\n  private _menuOpen: boolean = false;\n\n  @Input('md-menu-trigger-for') menu: MdMenu;\n  @Output() onMenuOpen = new EventEmitter();\n  @Output() onMenuClose = new EventEmitter();\n\n  constructor(private _overlay: Overlay, private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef) {}\n\n  ngAfterViewInit() {\n    this._checkMenu();\n    this.menu.close.subscribe(() => this.closeMenu());\n  }\n\n  ngOnDestroy() { this.destroyMenu(); }\n\n  get menuOpen(): boolean { return this._menuOpen; }\n\n  @HostListener('click')\n  toggleMenu(): Promise<void> {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  openMenu(): Promise<void> {\n    return this._createOverlay()\n      .then(() => this._overlayRef.attach(this._portal))\n      .then(() => this._setIsMenuOpen(true));\n  }\n\n  closeMenu(): Promise<void> {\n    if (!this._overlayRef) { return Promise.resolve(); }\n\n    return this._overlayRef.detach()\n        .then(() => this._setIsMenuOpen(false));\n  }\n\n  destroyMenu(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this.menu._setClickCatcher(isOpen);\n    this._menuOpen ? this.onMenuOpen.emit(null) : this.onMenuClose.emit(null);\n  }\n\n  /**\n   *  This method checks that a valid instance of MdMenu has been passed into\n   *  md-menu-trigger-for.  If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu || !(this.menu instanceof MdMenu)) {\n      throw new MdMenuMissingError();\n    }\n  }\n\n  /**\n   *  This method creates the overlay from the provided menu's template and saves its\n   *  OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): Promise<any> {\n    if (this._overlayRef) { return Promise.resolve(); }\n\n    this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    return this._overlay.create(this._getOverlayConfig())\n        .then(overlay => this._overlayRef = overlay);\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayState\n   */\n  private _getOverlayConfig(): OverlayState {\n    const overlayState = new OverlayState();\n    overlayState.positionStrategy = this._getPosition();\n    return overlayState;\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy  {\n    const positionX: HorizontalConnectionPos = this.menu.positionX === 'before' ? 'end' : 'start';\n    const positionY: VerticalConnectionPos = this.menu.positionY === 'above' ? 'bottom' : 'top';\n\n    return this._overlay.position().connectedTo(\n      this._element,\n      {originX: positionX, originY: positionY},\n      {overlayX: positionX, overlayY: positionY}\n    );\n  }\n}\n"]}