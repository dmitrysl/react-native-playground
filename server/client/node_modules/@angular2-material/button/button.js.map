{"version":3,"file":"button.js","sourceRoot":"","sources":["../../usr/local/google/home/jelbourn/material2/tmp/broccoli_type_script_compiler-input_base_path-oPmWLW1O.tmp/0/src/demo-app/components/button/button.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  Input,\n  HostBinding,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Renderer,\n  NgModule,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BooleanFieldValue} from '@angular2-material/core/annotations/field-value';\nimport {MdRippleModule} from '@angular2-material/core/ripple/ripple';\n\n// TODO(jelbourn): Make the `isMouseDown` stuff done with one global listener.\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'button[md-button], button[md-raised-button], button[md-icon-button], ' +\n            'button[md-fab], button[md-mini-fab]',\n  inputs: ['color'],\n  host: {\n    '[class.md-button-focus]': '_isKeyboardFocused',\n    '(mousedown)': '_setMousedown()',\n    '(focus)': '_setKeyboardFocus()',\n    '(blur)': '_removeKeyboardFocus()',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MdButton {\n  private _color: string;\n\n  /** Whether the button has focus from the keyboard (not the mouse). Used for class binding. */\n  _isKeyboardFocused: boolean = false;\n\n  /** Whether a mousedown has occurred on this element in the last 100ms. */\n  _isMouseDown: boolean = false;\n\n  /** Whether the ripple effect on click should be disabled. */\n  @Input() @BooleanFieldValue() disableRipple: boolean = false;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer) { }\n\n  get color(): string {\n    return this._color;\n  }\n\n  set color(value: string) {\n    this._updateColor(value);\n  }\n\n  _setMousedown() {\n    // We only *show* the focus style when focus has come to the button via the keyboard.\n    // The Material Design spec is silent on this topic, and without doing this, the\n    // button continues to look :active after clicking.\n    // @see http://marcysutton.com/button-focus-hell/\n    this._isMouseDown = true;\n    setTimeout(() => { this._isMouseDown = false; }, 100);\n  }\n\n  _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n\n  _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this._renderer.setElementClass(this._elementRef.nativeElement, `md-${color}`, isAdd);\n    }\n  }\n\n  _setKeyboardFocus() {\n    this._isKeyboardFocused = !this._isMouseDown;\n  }\n\n  _removeKeyboardFocus() {\n    this._isKeyboardFocused = false;\n  }\n\n  /** TODO(hansl): e2e test this function. */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  isRoundButton() {\n    const el = this._elementRef.nativeElement;\n    return el.hasAttribute('md-icon-button') ||\n        el.hasAttribute('md-fab') ||\n        el.hasAttribute('md-mini-fab');\n  }\n\n  isRippleEnabled() {\n    return !this.disableRipple;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab]',\n  inputs: ['color'],\n  host: {\n    '[class.md-button-focus]': '_isKeyboardFocused',\n    '(mousedown)': '_setMousedown()',\n    '(focus)': '_setKeyboardFocus()',\n    '(blur)': '_removeKeyboardFocus()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MdAnchor extends MdButton {\n  _disabled: boolean = null;\n\n  constructor(elementRef: ElementRef, renderer: Renderer) {\n    super(elementRef, renderer);\n  }\n\n  @HostBinding('tabIndex')\n  get tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n\n  @HostBinding('attr.aria-disabled')\n  /** Gets the aria-disabled value for the component, which must be a string for Dart. */\n  get isAriaDisabled(): string {\n    return this.disabled ? 'true' : 'false';\n  }\n\n  @HostBinding('attr.disabled')\n  @Input('disabled')\n  get disabled() { return this._disabled; }\n\n  set disabled(value: boolean) {\n    // The presence of *any* disabled value makes the component disabled, *except* for false.\n    this._disabled = (value != null && value != false) ? true : null;\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n\n\n/** @deprecated */\nexport const MD_BUTTON_DIRECTIVES: any[] = [MdButton, MdAnchor];\n\n\n@NgModule({\n  imports: [CommonModule, MdRippleModule],\n  exports: MD_BUTTON_DIRECTIVES,\n  declarations: MD_BUTTON_DIRECTIVES,\n})\nexport class MdButtonModule { }\n"]}