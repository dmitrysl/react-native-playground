{"version":3,"file":"toolbar.js","sourceRoot":"","sources":["../../usr/local/google/home/jelbourn/material2/tmp/broccoli_type_script_compiler-input_base_path-oPmWLW1O.tmp/0/src/demo-app/components/toolbar/toolbar.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAMO,eAAe,CAAC,CAAA;AACvB,qBAAuB,eAAe,CAAC,CAAA;AACvC,qBAAyB,eAAe,CAAC,CAAA;AAUzC;IAIE,mBAAoB,UAAsB,EAAU,QAAkB;QAAlD,eAAU,GAAV,UAAU,CAAY;QAAU,aAAQ,GAAR,QAAQ,CAAU;IAAI,CAAC;IAG3E,sBAAI,4BAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;aAED,UAAU,KAAa;YACrB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;;;OAJA;IAMO,gCAAY,GAApB,UAAqB,QAAgB;QACnC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,CAAC;IAEO,oCAAgB,GAAxB,UAAyB,KAAa,EAAE,KAAc;QACpD,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,QAAM,KAAO,EAAE,KAAK,CAAC,CAAC;QACrF,CAAC;IACH,CAAC;IAnBD;QAAC,YAAK,EAAE;;0CAAA;IAdV;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,YAAY;YACtB,WAAW,EAAE,cAAc;YAC3B,SAAS,EAAE,CAAC,aAAa,CAAC;YAC1B,eAAe,EAAE,8BAAuB,CAAC,MAAM;YAC/C,aAAa,EAAE,wBAAiB,CAAC,IAAI;SACtC,CAAC;;iBAAA;IA4BF,gBAAC;AAAD,CAAC,AA3BD,IA2BC;AA3BY,iBAAS,YA2BrB,CAAA;AAED,kBAAkB;AACL,6BAAqB,GAAG,CAAC,SAAS,CAAC,CAAC;AAOjD;IAAA;IAA+B,CAAC;IAJhC;QAAC,eAAQ,CAAC;YACR,OAAO,EAAE,6BAAqB;YAC9B,YAAY,EAAE,6BAAqB;SACpC,CAAC;;uBAAA;IAC6B,sBAAC;AAAD,CAAC,AAAhC,IAAgC;AAAnB,uBAAe,kBAAI,CAAA","sourcesContent":["import {\n  NgModule,\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Renderer} from '@angular/core';\nimport {ElementRef} from '@angular/core';\n\n@Component({\n  moduleId: module.id,\n  selector: 'md-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class MdToolbar {\n\n  private _color: string;\n\n  constructor(private elementRef: ElementRef, private renderer: Renderer) { }\n\n  @Input()\n  get color(): string {\n    return this._color;\n  }\n\n  set color(value: string) {\n    this._updateColor(value);\n  }\n\n  private _updateColor(newColor: string) {\n    this._setElementColor(this._color, false);\n    this._setElementColor(newColor, true);\n    this._color = newColor;\n  }\n\n  private _setElementColor(color: string, isAdd: boolean) {\n    if (color != null && color != '') {\n      this.renderer.setElementClass(this.elementRef.nativeElement, `md-${color}`, isAdd);\n    }\n  }\n\n}\n\n/** @deprecated */\nexport const MD_TOOLBAR_DIRECTIVES = [MdToolbar];\n\n\n@NgModule({\n  exports: MD_TOOLBAR_DIRECTIVES,\n  declarations: MD_TOOLBAR_DIRECTIVES,\n})\nexport class MdToolbarModule { }\n"]}