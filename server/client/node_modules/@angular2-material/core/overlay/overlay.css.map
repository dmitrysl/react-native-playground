{"version":3,"file":"core/overlay/overlay.css","sources":["core/overlay/overlay.scss","core/style/_variables.scss","core/style/_theme-functions.scss"],"sourcesContent":["// TODO(jelbourn): change from the `md` prefix to something else for everything in the toolkit.\n\n@import 'variables';\n\n/** The overlay-container is an invisible element which contains all individual overlays. */\n.md-overlay-container {\n  position: absolute;\n\n  // Disable events from being captured on the overlay container.\n  pointer-events: none;\n\n  // The container should be the size of the viewport.\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n}\n\n/** A single overlay pane. */\n.md-overlay-pane {\n  position: absolute;\n  pointer-events: auto;\n  box-sizing: border-box;\n  z-index: $z-index-overlay;\n}\n","@import 'theme-functions';\n\n\n// Typography\n$md-body-font-size-base: rem(1.4) !default;\n$md-font-family: Roboto, 'Helvetica Neue', sans-serif !default;\n\n// Media queries\n$md-xsmall: 'max-width: 600px';\n\n// TODO: Revisit all z-indices before beta\n// z-index master list\n$z-index-fab: 20 !default;\n$z-index-drawer: 100 !default;\n$z-index-overlay: 1000 !default;\n\n// Global constants\n$pi: 3.14159265;\n\n// Padding between input toggles and their labels\n$md-toggle-padding: 8px !default;\n// Width and height of input toggles\n$md-toggle-size: 20px !default;\n\n// Easing Curves\n// TODO(jelbourn): all of these need to be revisited\n\n// The default animation curves used by material design.\n$md-linear-out-slow-in-timing-function: cubic-bezier(0, 0, 0.2, 0.1) !default;\n$md-fast-out-slow-in-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;\n$md-fast-out-linear-in-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;\n\n$ease-in-out-curve-function: cubic-bezier(0.35, 0, 0.25, 1) !default;\n\n$swift-ease-out-duration: 400ms !default;\n$swift-ease-out-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n$swift-ease-out: all $swift-ease-out-duration $swift-ease-out-timing-function !default;\n\n$swift-ease-in-duration: 300ms !default;\n$swift-ease-in-timing-function: cubic-bezier(0.55, 0, 0.55, 0.2) !default;\n$swift-ease-in: all $swift-ease-in-duration $swift-ease-in-timing-function !default;\n\n$swift-ease-in-out-duration: 500ms !default;\n$swift-ease-in-out-timing-function: $ease-in-out-curve-function !default;\n$swift-ease-in-out: all $swift-ease-in-out-duration $swift-ease-in-out-timing-function !default;\n\n$swift-linear-duration: 80ms !default;\n$swift-linear-timing-function: linear !default;\n$swift-linear: all $swift-linear-duration $swift-linear-timing-function !default;\n","// ** Two main functions for users **\n// md-palette: used for defining your theme in terms of Material hues.\n// md-color: apply colors to components from the palette. Consumes the output of md-palette\n\n// Implement the rem unit with SCSS so we don't have to actually set a font-size on\n// the user's body element.\n@function rem($multiplier) {\n  $font-size: 10px;\n  @return $multiplier * $font-size;\n}\n\n// For a given hue in a palette, return the contrast color from the map of contrast palettes.\n@function md-contrast($color-map, $hue, $contrast-color-map) {\n  @return map-get(map-get($contrast-color-map, $color-map), $hue);\n}\n\n\n// Creates a map of hues to colors for a theme.\n// $color-map\n// $primary\n// $lighter\n// $darker\n@function md-palette($color-map, $primary, $lighter, $darker, $contrast-color-map) {\n  $result: map_merge($color-map, (\n    default: map-get($color-map, $primary),\n    lighter: map-get($color-map, $lighter),\n    darker: map-get($color-map, $darker),\n\n    default-contrast: md-contrast($color-map, $primary, $contrast-color-map),\n    lighter-contrast: md-contrast($color-map, $lighter, $contrast-color-map),\n    darker-contrast: md-contrast($color-map, $darker, $contrast-color-map)\n  ));\n\n  // For each hue in the palette, add a \"-contrast\" color to the map.\n  @each $hue, $color in $color-map {\n    $result: map_merge($result, (\n      '#{$hue}-contrast': md-contrast($color-map, $hue, $contrast-color-map)\n    ));\n  }\n\n  @return $result;\n}\n\n// Gets a color for a material design component.\n// $color-map: a map of {key: color}.\n// $hue-key: key used to lookup the color in $colorMap. Defaults to 'default'\n//     If $hue-key is a number between 0 and 1, it will be treated as $opacity.\n// $opacity: the opacity to apply to the color.\n@function md-color($color-map, $hue-key: default, $opacity: 1) {\n  // If hueKey is a number between zero and one, then it actually contains an\n  // opacity value, so recall this function with the default hue and that given opacity.\n  @if type-of($hue-key) == number and $hue-key >= 0 and $hue-key <= 1 {\n    @return md-color($color-map, default, $hue-key);\n  }\n\n  $color: map-get($color-map, $hue-key);\n  $opacity: if(opacity($color) < 1, opacity($color), $opacity);\n\n  @return rgba($color, $opacity);\n}\n\n\n"],"mappings":"AAIA,4FAA4F;AAC5F,AAAA,qBAAqB,CAAC;EACpB,QAAQ,EAAE,QAAS;EAGnB,cAAc,EAAE,IAAK;EAGrB,GAAG,EAAE,CAAE;EACP,IAAI,EAAE,CAAE;EACR,MAAM,EAAE,IAAK;EACb,KAAK,EAAE,IAAK,GACb;;AAED,6BAA6B;AAC7B,AAAA,gBAAgB,CAAC;EACf,QAAQ,EAAE,QAAS;EACnB,cAAc,EAAE,IAAK;EACrB,UAAU,EAAE,UAAW;EACvB,OAAO,ECTS,IAAI,GDUrB","names":[],"sourceRoot":"/source/"}