{"version":3,"sources":["services/authentication.service.ts"],"names":["core_1","require","http_1","AuthenticationService","http","this","currentUser","JSON","parse","localStorage","getItem","token","prototype","login","username","password","_this","console","warn","arguments","post","pass","map","response","data","json","success","alert","message","setItem","stringify","logout","removeItem","__decorate","Injectable","exports"],"mappings":"sgBAAAA,OAAAC,QAA2B,iBAC3BC,OAAAD,QAAwC,iBAKxCE,sBAAA,WAGI,QAAAA,GAAoBC,GAAAC,KAAAD,KAAAA,CAEhB,IAAIE,GAAcC,KAAKC,MAAMC,aAAaC,QAAQ,eAClDL,MAAKM,MAAQL,GAAeA,EAAYK,MAoChD,MAjCIR,GAAAS,UAAAC,MAAA,SAAMC,EAAUC,GAAhB,GAAAC,GAAAX,IAEI,OADAY,SAAQC,KAAKC,WACNd,KAAKD,KAAKgB,KAAK,mBAAqBP,MAAOC,EAAUO,KAAMN,IAC7DO,IAAI,SAACC,GACFN,QAAQC,KAAKK,EACb,IAAIC,GAAOD,EAASE,MACpB,KAAKD,IAASA,EAAKE,QAEf,MADAC,OAAMH,EAAKI,UACFF,SAAS,EAGtB,IAAIf,GAAQa,EAAKb,KACjB,OAAIA,IAEAK,EAAKL,MAAQA,EAGbF,aAAaoB,QAAQ,cAAetB,KAAKuB,WAAYhB,SAAUA,EAAUH,MAAOA,KAGzEa,GAGAA,KAKvBrB,EAAAS,UAAAmB,OAAA,WAEI1B,KAAKM,MAAQ,KACbF,aAAauB,WAAW,gBAzChC7B,EAAA8B,YAACjC,OAAAkC,iEACYC,SAAAhC,sBAAqBA","file":"services/authentication.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\n \n\n@Injectable()\nexport class AuthenticationService {\n    public token: string;\n \n    constructor(private http: Http) {\n        // set token if saved in local storage\n        var currentUser = JSON.parse(localStorage.getItem('currentUser'));\n        this.token = currentUser && currentUser.token;\n    }\n \n    login(username, password): Observable<Object> {\n        console.warn(arguments)\n        return this.http.post('/api/auth/login', { login: username, pass: password }) //JSON.stringify()\n            .map((response: Response) => {\n                console.warn(response)\n                let data = response.json();\n                if (!data || !data.success) {\n                    alert(data.message);\n                    return { success: false };\n                }\n                // login successful if there's a jwt token in the response\n                let token = data.token;\n                if (token) {\n                    // set token property\n                    this.token = token;\n \n                    // store username and jwt token in local storage to keep user logged in between page refreshes\n                    localStorage.setItem('currentUser', JSON.stringify({ username: username, token: token }));\n \n                    // return true to indicate successful login\n                    return data;\n                } else {\n                    // return false to indicate failed login\n                    return data;\n                }\n            });\n    }\n \n    logout(): void {\n        // clear token remove user from local storage to log user out\n        this.token = null;\n        localStorage.removeItem('currentUser');\n    }\n}"],"sourceRoot":"/source/"}