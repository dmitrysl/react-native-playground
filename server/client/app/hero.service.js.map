{"version":3,"sources":["hero.service.ts"],"names":["core_1","require","http_1","mock_heroes_1","HeroService","http","this","heroesUrl","prototype","getHeroes","get","toPromise","then","response","json","data","catch","handleError","getHeroesSlowly","Promise","resolve","setTimeout","HEROES","getHero","id","heroes","find","hero","save","put","post","delete","headers","Headers","append","url","Content-Type","JSON","stringify","res","error","console","reject","message","__decorate","Injectable","exports"],"mappings":"sgBAAAA,OAAAC,QAA2B,iBAC3BC,OAAAD,QAAwC,gBACxCA,SAAO,8BAGP,IAAAE,eAAAF,QAAuB,iBAIvBG,YAAA,WAGI,QAAAA,GAAoBC,GAAAC,KAAAD,KAAAA,EAFZC,KAAAC,UAAY,aAsExB,MAlEIH,GAAAI,UAAAC,UAAA,WACI,MAAOH,MAAKD,KAAKK,IAAIJ,KAAKC,WAClBI,YACAC,KAAK,SAAAC,GAAY,MAAAA,GAASC,OAAOC,OACjCC,MAAMV,KAAKW,cAGvBb,EAAAI,UAAAU,gBAAA,WACI,MAAO,IAAIC,SAAgB,SAAAC,GACvB,MAAAC,YAAW,WAAM,MAAAD,GAAQjB,cAAAmB,SAAS,QAI1ClB,EAAAI,UAAAe,QAAA,SAAQC,GACJ,MAAOlB,MAAKG,YACHG,KAAK,SAAAa,GAAU,MAAAA,GAAOC,KAAK,SAAAC,GAAQ,MAAAA,GAAKH,KAAOA,OAG5DpB,EAAAI,UAAAoB,KAAA,SAAKD,GACD,MAAIA,GAAKH,GACElB,KAAKuB,IAAIF,GAEbrB,KAAKwB,KAAKH,IAGrBvB,EAAAI,UAAAuB,OAAA,SAAOJ,GACH,GAAIK,GAAU,GAAI9B,QAAA+B,OAClBD,GAAQE,OAAO,eAAgB,mBAE/B,IAAIC,GAAS7B,KAAKC,UAAS,IAAIoB,EAAKH,EAEpC,OAAOlB,MAAKD,KACH0B,OAAOI,GAAMH,QAASA,IACtBrB,YACAK,MAAMV,KAAKW,cAIhBb,EAAAI,UAAAsB,KAAR,SAAaH,GACT,GAAIK,GAAU,GAAI9B,QAAA+B,SAASG,eAAgB,oBAE3C,OAAO9B,MAAKD,KACHyB,KAAKxB,KAAKC,UAAW8B,KAAKC,UAAUX,IAAQK,QAASA,IACrDrB,YACAC,KAAK,SAAA2B,GAAO,MAAAA,GAAIzB,OAAOC,OACvBC,MAAMV,KAAKW,cAIhBb,EAAAI,UAAAqB,IAAR,SAAYF,GACR,GAAIK,GAAU,GAAI9B,QAAA+B,OAClBD,GAAQE,OAAO,eAAgB,mBAE/B,IAAIC,GAAS7B,KAAKC,UAAS,IAAIoB,EAAKH,EAEpC,OAAOlB,MAAKD,KACHwB,IAAIM,EAAKE,KAAKC,UAAUX,IAAQK,QAASA,IACzCrB,YACAC,KAAK,WAAM,MAAAe,KACXX,MAAMV,KAAKW,cAGhBb,EAAAI,UAAAS,YAAR,SAAoBuB,GAEhB,MADAC,SAAQD,MAAM,oBAAqBA,GAC5BrB,QAAQuB,OAAOF,EAAMG,SAAWH,IAtE/CpC,EAAAwC,YAAC5C,OAAA6C,iEACYC,SAAA1C,YAAWA","file":"hero.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response } from '@angular/http';\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { Hero } from './hero';\r\nimport { HEROES } from './mock-heroes';\r\n\r\n\r\n@Injectable()\r\nexport class HeroService {\r\n    private heroesUrl = 'app/heroes';  // URL to web api\r\n\r\n    constructor(private http: Http) { }\r\n\r\n    getHeroes(): Promise<Hero[]> {\r\n        return this.http.get(this.heroesUrl)\r\n               .toPromise()\r\n               .then(response => response.json().data as Hero[])\r\n               .catch(this.handleError);\r\n    }\r\n\r\n    getHeroesSlowly(): Promise<Hero[]> {\r\n        return new Promise<Hero[]>(resolve =>\r\n            setTimeout(() => resolve(HEROES), 2000) // 2 seconds\r\n        );\r\n    }\r\n\r\n    getHero(id: number): Promise<Hero> {\r\n        return this.getHeroes()\r\n                .then(heroes => heroes.find(hero => hero.id === id));\r\n    }\r\n\r\n    save(hero: Hero): Promise<Hero>  {\r\n        if (hero.id) {\r\n            return this.put(hero);\r\n        }\r\n        return this.post(hero);\r\n    }\r\n\r\n    delete(hero: Hero): Promise<Response> {\r\n        let headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        let url = `${this.heroesUrl}/${hero.id}`;\r\n\r\n        return this.http\r\n                .delete(url, {headers: headers})\r\n                .toPromise()\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    // Create new hero\r\n    private post(hero: Hero): Promise<Hero> {\r\n        let headers = new Headers({'Content-Type': 'application/json'});\r\n\r\n        return this.http\r\n                .post(this.heroesUrl, JSON.stringify(hero), {headers: headers})\r\n                .toPromise()\r\n                .then(res => res.json().data)\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    // update existing hero\r\n    private put(hero: Hero): Promise<Hero> {\r\n        let headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        let url = `${this.heroesUrl}/${hero.id}`;\r\n\r\n        return this.http\r\n                .put(url, JSON.stringify(hero), {headers: headers})\r\n                .toPromise()\r\n                .then(() => hero)\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: any): Promise<any> {\r\n        console.error('An error occurred', error);\r\n        return Promise.reject(error.message || error);\r\n    }\r\n}"],"sourceRoot":"/source/"}